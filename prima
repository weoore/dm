using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        List<List<double>> G = new List<List<double>>()
        {
            new List<double> { double.PositiveInfinity, 2, 2, double.PositiveInfinity, 7, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity },
            new List<double> { 2, double.PositiveInfinity, 2, 9, 2, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity },
            new List<double> { 2, 2, double.PositiveInfinity, double.PositiveInfinity, 5, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity },
            new List<double> { double.PositiveInfinity, 9, double.PositiveInfinity, double.PositiveInfinity, 10, 5, 2, 16 },
            new List<double> { 7, 2, 2, 10, double.PositiveInfinity, double.PositiveInfinity, 9, double.PositiveInfinity },
            new List<double> { double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, 5, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, 17 },
            new List<double> { double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, 2, 9, double.PositiveInfinity, double.PositiveInfinity, 17 },
            new List<double> { double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, 16, double.PositiveInfinity, 17, 17, double.PositiveInfinity }
        };

        int n = G.Count;
        HashSet<int> V = new HashSet<int>(Enumerable.Range(0, n));
        HashSet<int> U = new HashSet<int> { V.First() };

        List<Tuple<double, int, int>> mst = new List<Tuple<double, int, int>>();
        while (V.Count > 0)
        {
            List<Tuple<double, int, int>> E = new List<Tuple<double, int, int>>();
            foreach (int uValue in U)
            {
                foreach (int vValue in V)
                {
                    E.Add(new Tuple<double, int, int>(G[vValue][uValue], vValue, uValue));
                }
            }
            Tuple<double, int, int> minEdge = E.Min();
            double e = minEdge.Item1;
            int v = minEdge.Item2;
            int u = minEdge.Item3;
            mst.Add(new Tuple<double, int, int>(e, v, u));
            U.Add(v);
            V.Remove(v);
        }

        double sum = mst.Sum(tuple => tuple.Item1);
        Console.WriteLine(sum);
    }
}
